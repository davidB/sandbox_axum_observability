# TODO do not loop when not in sidecar mode (or loop over [ $.Release.Namespace ])
{{- range .Values.collector.sidecarNamespaces }}
---
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: {{ $.Release.Name }}
  namespace: {{ . }}
spec:
  mode: {{ $.Values.collector.mode }}
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
      # opencensus:
      # zipkin:
      # jaeger:
      #   protocols:
      #     grpc:
      #     thrift_http:
      #     thrift_compact:
      #     thrift_binary:
    processors:
    #   batch: {}
    #   # If set to null, will be overridden with values based on k8s resource limits
    #   memory_limiter: null
    # extensions: {}
    #   health_check: {}
    #   memory_ballast: {}
      # transform:
      #   metric_statements:
      #     - context: metric
      #       statements:
      #       - set(attributes["namespace"], resource.attributes["k8s_namespace_name"])
      #       - set(attributes["container"], resource.attributes["k8s.container.name"])
      #       - set(attributes["pod"], resource.attributes["k8s.pod.name"])
      #       - set(attributes["cluster"], resource.attributes["k8s.cluster.name"])
    exporters:
      otlp:
        endpoint: {{ $.Values.collector.config.exporters.otlp.endpoint }}
        tls:
          insecure: true
      prometheusremotewrite:
        endpoint: {{ $.Values.collector.config.exporters.prometheusremotewrite.endpoint }}
        target_info:
          enabled: true
    connectors:
      spanmetrics:
        dimensions:
          - name: http.method
          - name: http.status_code
          - name: http.route
        # exemplars:
        #   enabled: true
        dimensions_cache_size: 1000
        aggregation_temporality: "AGGREGATION_TEMPORALITY_CUMULATIVE"
        metrics_flush_interval: 30s
    service:
      # extensions: [health_check, memory_ballast]
      extensions: []
      pipelines:
        traces:
          receivers: [otlp]
          # processors: [memory_limiter, batch]
          processors: []
          exporters: [otlp, spanmetrics]
        metrics:
          receivers: [spanmetrics]
          exporters: [prometheusremotewrite]

  # ports should be infered by operator but can't see them on pod/deployment'spec/daemonset'spec
  # but ok on service
  # ports:
  #   - name: otlp-grpc
  #     protocol: TCP
  #     appProtocol: grpc
  #     port: 4317
  #     targetPort: 4317
  #   - name: otlp-http
  #     protocol: TCP
  #     appProtocol: http
  #     port: 4318
  #     targetPort: 4318
  #   - name: otlp-http-legacy
  #     protocol: TCP
  #     appProtocol: http
  #     port: 55681
  #     targetPort: 4318
  #   - name: opencensus
  #     protocol: TCP
  #     port: 55678
  #     targetPort: 55678
  #   - name: jaeger-grpc
  #     protocol: TCP
  #     appProtocol: grpc
  #     port: 14250
  #     targetPort: 14250
  #   - name: jaeger-thrift-http
  #     protocol: TCP
  #     appProtocol: http
  #     port: 14268
  #     targetPort: 14268
  #   - name: jaeger-thrift-compact
  #     protocol: UDP
  #     port: 6831
  #     targetPort: 6831
  #   - name: jaeger-thrift-binary
  #     protocol: UDP
  #     port: 6832
  #     targetPort: 6832
{{- end }}
